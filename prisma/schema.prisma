generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String
  avatar            String?
  role              UserRole            @default(USER)
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  bio               String?
  location          String?
  website           String?
  socialLinks       Json?
  preferences       Json?
  timezone          String?
  language          String              @default("en")
  emailVerified     DateTime?
  phone             String?
  password          String?
  isVerified        Boolean             @default(false)
  verificationToken String              @default("")
  bankName          String?             @map("bank_name")
  accountNumber     String?             @map("account_number")
  subaccountCode    String?             @map("subaccount_code")
  recipientCode     String?             @map("recipient_code")
  walletBalance     Float               @default(0)
  image             String?
  accounts          Account[]
  adminProfile      Admin?
  AIRecommendation  AIRecommendation[]
  cartItems         CartItem[]
  certificates      Certificate[]
  createdCourses    Course[]            @relation("CourseCreator")
  ownedCourses      Course[]            @relation("CourseOwner")
  discussionReplies DiscussionReply[]
  discussions       Discussion[]
  enrollments       Enrollment[]
  LearningPath      LearningPath[]
  mentorSessions    MentorshipSession[] @relation("StudentSessions")
  tutoredSessions   MentorshipSession[] @relation("TutorSessions")
  notifications     Notification[]
  paymentMethod     PaymentMethod[]
  ProgressMilestone ProgressMilestone[]
  QuizAnswer        QuizAnswer[]
  reports           Report[]
  reviews           Review[]
  sessions          Session[]
  studentProfile    Student?
  submissions       Submission[]
  transactions      Transaction[]
  tutorProfile      Tutor?
  analytics         UserAnalytics[]
  UserSkill         UserSkill[]
  wishlist          Wishlist[]

  @@map("users")
}

model Student {
  id               String         @id @default(cuid())
  userId           String         @unique
  level            EducationLevel @default(BEGINNER)
  interests        String[]
  goals            String[]
  studyHours       Int            @default(0)
  completedHours   Int            @default(0)
  streak           Int            @default(0)
  lastActiveDate   DateTime?
  totalPoints      Int            @default(0)
  currentRank      String         @default("Novice")
  hasStudentId     Boolean        @default(false)
  coursesStarted   Int            @default(0)
  coursesCompleted Int            @default(0)
  averageScore     Float?
  totalAssignments Int            @default(0)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Tutor {
  id             String    @id @default(cuid())
  userId         String    @unique
  title          String
  expertise      String[]
  experience     Int
  education      String[]
  certifications String[]
  hourlyRate     Float?
  isVerified     Boolean   @default(false)
  verifiedAt     DateTime?
  course         String?
  totalStudents  Int       @default(0)
  totalCourses   Int       @default(0)
  totalEarnings  Float     @default(0)
  averageRating  Float     @default(0)
  totalReviews   Int       @default(0)
  responseTime   Int       @default(24)
  completionRate Float     @default(0)
  availability   Json?
  timezone       String?
  Course         Course[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tutors")
}

model Admin {
  id          String     @id @default(cuid())
  userId      String     @unique
  permissions String[]
  department  String?
  level       AdminLevel @default(MODERATOR)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Course {
  id                  String             @id @default(cuid())
  title               String
  slug                String?            @unique
  description         String
  thumbnail           String?
  trailer             String?
  price               Float
  salePrice           Float?
  currency            String             @default("NGN")
  level               CourseLevel        @default(BEGINNER)
  status              CourseStatus       @default(DRAFT)
  language            String             @default("en")
  duration            Int?
  totalLessons        Int                @default(0)
  totalQuizzes        Int                @default(0)
  totalProjects       Int                @default(0)
  requirements        String[]
  outcomes            String[]
  targetAudience      String[]
  metaTitle           String?
  metaDescription     String?
  publishedAt         DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  virtualPrice        Float?
  physicalPrice       Float?
  certificate         Boolean?           @default(false)
  categoryId          String
  creatorId           String
  ownerId             String?
  basePrice           Float?
  currentPrice        Float?
  demandLevel         String?
  flashSaleEnd        DateTime?
  groupBuyingDiscount Float?
  groupBuyingEnabled  Boolean            @default(false)
  isFlashSale         Boolean            @default(false)
  previewVideo        String?
  subtitle            String
  tutorId             String
  allowDiscussions    Boolean            @default(false)
  tags                CourseTag[]
  AIRecommendation    AIRecommendation[] @relation("CourseRecommendations")
  cartItems           CartItem[]
  certificates        Certificate[]
  analytics           CourseAnalytics[]
  modules             CourseModule[]
  category            Category           @relation(fields: [categoryId], references: [id])
  creator             User               @relation("CourseCreator", fields: [creatorId], references: [id])
  owner               User?              @relation("CourseOwner", fields: [ownerId], references: [id])
  tutor               Tutor              @relation(fields: [tutorId], references: [id])
  discussions         Discussion[]
  enrollments         Enrollment[]
  LearningPath        LearningPath[]
  projects            Project[]
  reviews             Review[]
  Skill               Skill[]
  transactions        Transaction[]
  wishlist            Wishlist[]

  @@map("courses")
}

model CourseTag {
  id       String @id @default(cuid())
  name     String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  courses     Course[]

  @@map("categories")
}

model CourseModule {
  id          String     @id @default(cuid())
  title       String
  description String?
  sortOrder   Int
  duration    Int
  isPublished Boolean    @default(false)
  courseId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  content     String?
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  quizzes     Quiz[]
  resources   Resource[]

  @@map("course_modules")
}

model Lesson {
  id          String           @id @default(cuid())
  title       String
  description String?
  content     String?
  videoUrl    String?
  duration    Int
  sortOrder   Int
  isPreview   Boolean          @default(false)
  lessonType  LessonType       @default(VIDEO)
  moduleId    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  progress    LessonProgress[]
  module      CourseModule     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  resources   Resource[]

  @@map("lessons")
}

model Enrollment {
  id                String           @id @default(cuid())
  progress          Float            @default(0)
  status            EnrollmentStatus @default(ACTIVE)
  completedAt       DateTime?
  certificateIssued Boolean          @default(false)
  userId            String
  courseId          String
  enrolledAt        DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  course            Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonProgress    LessonProgress[]
  quizAttempts      QuizAttempt[]

  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id           String     @id @default(cuid())
  isCompleted  Boolean    @default(false)
  watchTime    Int        @default(0)
  completedAt  DateTime?
  userId       String
  lessonId     String
  enrollmentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson       Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  timeLimit    Int?
  passingScore Int           @default(70)
  maxAttempts  Int           @default(3)
  isActive     Boolean       @default(true)
  moduleId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  questions    Question[]
  QuizAnswer   QuizAnswer[]
  attempts     QuizAttempt[]
  module       CourseModule  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("quizzes")
}

model Question {
  id            String       @id @default(cuid())
  question      String
  questionType  QuestionType @default(MULTIPLE_CHOICE)
  options       Json?
  correctAnswer Json
  explanation   String?
  points        Int          @default(1)
  sortOrder     Int
  quizId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  QuizAnswer    QuizAnswer[]

  @@map("questions")
}

model QuizAttempt {
  id           String     @id @default(cuid())
  score        Float
  answers      Json
  timeSpent    Int
  isCompleted  Boolean    @default(false)
  userId       String
  quizId       String
  enrollmentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  quiz         Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Project {
  id           String       @id @default(cuid())
  title        String
  description  String
  requirements String[]
  difficulty   CourseLevel  @default(BEGINNER)
  points       Int          @default(100)
  dueDate      DateTime?
  isActive     Boolean      @default(true)
  courseId     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  resources    Resource[]
  submissions  Submission[]

  @@map("projects")
}

model Submission {
  id        String           @id @default(cuid())
  content   String?
  fileUrl   String?
  githubUrl String?
  liveUrl   String?
  notes     String?
  status    SubmissionStatus @default(PENDING)
  score     Float?
  feedback  String?
  gradedAt  DateTime?
  userId    String
  projectId String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("submissions")
}

model QuizAnswer {
  id             String   @id @default(cuid())
  userId         String
  quizId         String
  questionId     String
  selectedAnswer String
  isCorrect      Boolean
  aiExplanation  String?
  submittedAt    DateTime @default(now())
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quiz           Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_answers")
}

model LearningPath {
  id          String              @id @default(cuid())
  userId      String
  courseId    String
  title       String
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  course      Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones  ProgressMilestone[]

  @@map("learning_paths")
}

model Skill {
  id                String             @id @default(cuid())
  name              String             @unique
  description       String?
  courseId          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  aiRecommendations AIRecommendation[] @relation("SkillRecommendations")
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userSkills        UserSkill[]

  @@map("skills")
}

model UserSkill {
  id         String         @id @default(cuid())
  userId     String
  skillId    String
  level      EducationLevel @default(BEGINNER)
  acquiredAt DateTime       @default(now())
  skill      Skill          @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_skills")
}

model ProgressMilestone {
  id             String        @id @default(cuid())
  userId         String
  learningPathId String?
  type           MilestoneType
  description    String
  achievedAt     DateTime      @default(now())
  learningPath   LearningPath? @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("progress_milestones")
}

model AIRecommendation {
  id          String   @id @default(cuid())
  userId      String
  courseId    String?
  skillId     String?
  type        String
  description String
  createdAt   DateTime @default(now())
  course      Course?  @relation("CourseRecommendations", fields: [courseId], references: [id], onDelete: Cascade)
  skill       Skill?   @relation("SkillRecommendations", fields: [skillId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_recommendations")
}

model MentorshipSession {
  id          String        @id @default(cuid())
  title       String
  description String?
  duration    Int
  price       Float
  status      SessionStatus @default(SCHEDULED)
  meetingUrl  String?
  notes       String?
  feedback    String?
  rating      Int?
  scheduledAt DateTime
  startedAt   DateTime?
  endedAt     DateTime?
  studentId   String
  tutorId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  student     User          @relation("StudentSessions", fields: [studentId], references: [id], onDelete: Cascade)
  tutor       User          @relation("TutorSessions", fields: [tutorId], references: [id], onDelete: Cascade)

  @@map("mentorship_sessions")
}

model Registration {
  id         String   @id @default(cuid())
  firstname  String
  lastname   String
  email      String   @unique
  occupation String
  course     String
  type       String   @default("physical")
  phone      String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("registrations")
}

model ProgramRegistration {
  id          String   @id @default(cuid())
  fullName    String
  age         Int
  dateOfBirth DateTime
  phoneNumber String
  email       String   @unique
  goals       String?
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("program_registrations")
}

model Review {
  id           String   @id @default(cuid())
  rating       Int
  comment      String?
  isPublic     Boolean  @default(true)
  userId       String
  courseId     String
  tutorName    String
  reviewerName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("cart_items")
}

model Transaction {
  id                String            @id @default(cuid())
  amount            Float
  currency          String            @default("NGN")
  status            TransactionStatus @default(PENDING)
  paymentMethod     String?
  paymentId         String?
  description       String?
  metadata          Json?
  userId            String
  courseId          String?
  transactionId     String
  paymentDate       DateTime          @default(now())
  verifiedAt        DateTime          @updatedAt
  bankNameUsed      String?           @map("bank_name_used")
  accountNumberUsed String?           @map("account_number_used")
  recipientCodeUsed String?           @map("recipient_code_used")
  walletBalanceUsed Float?            @map("wallet_balance_used")
  isBankTransaction Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  course            Course?           @relation(fields: [courseId], references: [id])
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model PaymentMethod {
  id        String      @id @default(cuid())
  userId    String
  type      PaymentType @default(BANK)
  details   Json
  isDefault Boolean     @default(false)
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("payment_methods")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("wishlist")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  data      Json?
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Discussion {
  id        String            @id @default(cuid())
  title     String
  content   String
  isPinned  Boolean           @default(false)
  isLocked  Boolean           @default(false)
  userId    String
  courseId  String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  replies   DiscussionReply[]
  course    Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("discussions")
}

model DiscussionReply {
  id           String     @id @default(cuid())
  content      String
  userId       String
  discussionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("discussion_replies")
}

model Resource {
  id          String        @id @default(cuid())
  title       String
  description String?
  url         String
  type        ResourceType  @default(LINK)
  fileSize    Int?
  mimeType    String?
  isPublic    Boolean       @default(false)
  moduleId    String?
  lessonId    String?
  projectId   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  lesson      Lesson?       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  module      CourseModule? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  project     Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("resources")
}

model Certificate {
  id             String    @id @default(cuid())
  certificateId  String    @unique
  title          String
  description    String?
  imageUrl       String?
  issuedAt       DateTime  @default(now())
  expiresAt      DateTime?
  isRevoked      Boolean   @default(false)
  userId         String
  courseId       String
  studentName    String
  issuedDate     DateTime  @default(now())
  certificateUrl String    @default("")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  course         Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model UserAnalytics {
  id                String   @id @default(cuid())
  date              DateTime @db.Date
  loginCount        Int      @default(0)
  sessionDuration   Int      @default(0)
  coursesViewed     Int      @default(0)
  lessonsWatched    Int      @default(0)
  quizzesTaken      Int      @default(0)
  discussionPosts   Int      @default(0)
  reviewsWritten    Int      @default(0)
  projectsSubmitted Int      @default(0)
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("user_analytics")
}

model CourseAnalytics {
  id              String   @id @default(cuid())
  date            DateTime @db.Date
  newEnrollments  Int      @default(0)
  completions     Int      @default(0)
  dropouts        Int      @default(0)
  totalWatchTime  Int      @default(0)
  averageProgress Float    @default(0)
  quizAttempts    Int      @default(0)
  discussionPosts Int      @default(0)
  revenue         Float    @default(0)
  refunds         Float    @default(0)
  courseId        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, date])
  @@map("course_analytics")
}

model Report {
  id           String       @id @default(cuid())
  type         ReportType
  reason       String
  description  String?
  status       ReportStatus @default(PENDING)
  resolution   String?
  reporterId   String
  courseId     String?
  discussionId String?
  userId       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  reporter     User         @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Chat {
  id        String   @id @default(uuid())
  sessionId String
  message   Json
  modelUsed String?
  timestamp DateTime @default(now())
  session   Session  @relation("SessionChats", fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chats")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  chats        Chat[]   @relation("SessionChats")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  token   String   @unique
  expires DateTime
  email   String
  id      String   @id @default(cuid())

  @@unique([id, token, email])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  USER
  STUDENT
  TUTOR
  ADMIN
}

enum AdminLevel {
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum EducationLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SUSPENDED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  SUSPENDED
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
  PROJECT
  LIVE
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  CODE
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
  RETURNED
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentType {
  BANK
  WALLET
  PAYPAL
  STRIPE
  PAYSTACK
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ACHIEVEMENT
  REMINDER
}

enum ResourceType {
  PDF
  VIDEO
  AUDIO
  IMAGE
  LINK
  CODE
  DOCUMENT
}

enum ReportType {
  SPAM
  INAPPROPRIATE
  COPYRIGHT
  HARASSMENT
  OTHER
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
}

enum MilestoneType {
  LESSON_COMPLETED
  QUIZ_PASSED
  COURSE_COMPLETED
  SKILL_MASTERED
}

enum Language {
  EN
  ES
  FR
  DE
}
