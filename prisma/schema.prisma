generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT
// ================================

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String
  avatar            String?
  image             String?
  role              UserRole            @default(USER)
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  bio               String?
  location          String?
  website           String?
  socialLinks       Json?
  preferences       Json?
  timezone          String?
  language          String              @default("en")
  emailVerified     DateTime?
  phone             String?
  password          String?
  isVerified        Boolean             @default(false)
  verificationToken String              @default("")
  bankName          String?             @map("bank_name")
  accountNumber     String?             @map("account_number")
  subaccountCode    String?             @map("subaccount_code")
  recipientCode     String?             @map("recipient_code")
  walletBalance     Float               @default(0)
  accounts          Account[]
  sessions          Session[]
  studentProfile    Student?
  tutorProfile      Tutor?
  adminProfile      Admin?
  enrollments       Enrollment[]
  reviews           Review[]
  submissions       Submission[]
  mentorSessions    MentorshipSession[] @relation("StudentSessions")
  tutoredSessions   MentorshipSession[] @relation("TutorSessions")
  notifications     Notification[]
  cartItems         CartItem[]
  transactions      Transaction[]
  certificates      Certificate[]
  analytics         UserAnalytics[]
  createdCourses    Course[]            @relation("CourseCreator")
  ownedCourses      Course[]            @relation("CourseOwner")
  discussions       Discussion[]
  discussionReplies DiscussionReply[]
  reports           Report[]
  wishlist          Wishlist[]
  paymentMethod     PaymentMethod[]
  QuizAnswer        QuizAnswer[]
  LearningPath      LearningPath[]
  UserSkill         UserSkill[]
  ProgressMilestone ProgressMilestone[]
  AIRecommendation  AIRecommendation[]

  @@map("users")
}

model Student {
  id               String         @id @default(cuid())
  userId           String         @unique
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  level            EducationLevel @default(BEGINNER)
  interests        String[]
  goals            String[]
  studyHours       Int            @default(0)
  completedHours   Int            @default(0)
  streak           Int            @default(0)
  lastActiveDate   DateTime?
  totalPoints      Int            @default(0)
  currentRank      String         @default("Novice")
  hasStudentId     Boolean        @default(false)
  coursesStarted   Int            @default(0)
  coursesCompleted Int            @default(0)
  averageScore     Float?
  totalAssignments Int            @default(0)

  @@map("students")
}

model Tutor {
  id             String    @id @default(cuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  expertise      String[]
  experience     Int // years
  education      String[]
  certifications String[]
  hourlyRate     Float?
  isVerified     Boolean   @default(false)
  verifiedAt     DateTime?
  course         String?
  totalStudents  Int       @default(0)
  totalCourses   Int       @default(0)
  totalEarnings  Float     @default(0)
  averageRating  Float     @default(0)
  totalReviews   Int       @default(0)
  responseTime   Int       @default(24) // hours
  completionRate Float     @default(0)
  availability   Json? // Weekly schedule
  timezone       String?
  Course         Course[]

  @@map("tutors")
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  permissions String[]
  department  String?
  level       AdminLevel @default(MODERATOR)

  @@map("admins")
}

// ================================
// COURSE MANAGEMENT
// ================================

model Course {
  id                  String             @id @default(cuid())
  title               String
  slug                String?            @unique
  description         String
  subtitle            String
  basePrice           Float? // Base price for dynamic pricing
  currentPrice        Float? // Current price after discounts
  demandLevel         String? // e.g., "low", "medium", "high"
  isFlashSale         Boolean            @default(false)
  flashSaleEnd        DateTime? // End date for flash sale
  groupBuyingEnabled  Boolean            @default(false)
  groupBuyingDiscount Float? // Percentage, e.g., 0.5 for 50%
  previewVideo        String?
  thumbnail           String?
  trailer             String?
  price               Float
  salePrice           Float?
  currency            String             @default("NGN")
  level               CourseLevel        @default(BEGINNER)
  status              CourseStatus       @default(DRAFT)
  language            String             @default("en")
  duration            Int? // total minutes
  totalLessons        Int                @default(0)
  totalQuizzes        Int                @default(0)
  totalProjects       Int                @default(0)
  tags                CourseTag[]
  requirements        String[]
  outcomes            String[]
  targetAudience      String[]
  metaTitle           String?
  metaDescription     String?
  publishedAt         DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  virtualPrice        Float?
  physicalPrice       Float?
  certificate         Boolean?           @default(false)
  allowDiscussions    Boolean            @default(false)
  categoryId          String
  tutorId             String
  tutor               Tutor?             @relation(fields: [tutorId], references: [id])
  category            Category           @relation(fields: [categoryId], references: [id])
  creatorId           String
  creator             User               @relation("CourseCreator", fields: [creatorId], references: [id])
  ownerId             String?
  owner               User?              @relation("CourseOwner", fields: [ownerId], references: [id])
  modules             CourseModule[]
  enrollments         Enrollment[]
  reviews             Review[]
  cartItems           CartItem[]
  transactions        Transaction[]
  certificates        Certificate[]
  discussions         Discussion[]
  analytics           CourseAnalytics[]
  projects            Project[]
  wishlist            Wishlist[]
  LearningPath        LearningPath[]
  Skill               Skill[]
  AIRecommendation    AIRecommendation[] @relation("CourseRecommendations")

  @@map("courses")
}

model CourseTag {
  id       String @id @default(cuid())
  name     String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model CourseModule {
  id          String  @id @default(cuid())
  title       String
  content     String?
  description String?
  sortOrder   Int
  duration    Int // minutes
  isPublished Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons   Lesson[]
  quizzes   Quiz[]
  resources Resource[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_modules")
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     String? // Rich text content
  videoUrl    String?
  duration    Int // minutes
  sortOrder   Int
  isPreview   Boolean    @default(false)
  lessonType  LessonType @default(VIDEO)

  moduleId String
  module   CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  resources Resource[]
  progress  LessonProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lessons")
}

// ================================
// LEARNING PROGRESS
// ================================

model Enrollment {
  id                String           @id @default(cuid())
  progress          Float            @default(0) // 0-100
  status            EnrollmentStatus @default(ACTIVE)
  completedAt       DateTime?
  certificateIssued Boolean          @default(false)

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessonProgress LessonProgress[]
  quizAttempts   QuizAttempt[]

  enrolledAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id          String    @id @default(cuid())
  isCompleted Boolean   @default(false)
  watchTime   Int       @default(0) // seconds
  completedAt DateTime?

  userId       String
  lessonId     String
  enrollmentId String

  lesson     Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

// ================================
// ASSESSMENTS & PROJECTS
// ================================

model Quiz {
  id           String  @id @default(cuid())
  title        String
  description  String?
  timeLimit    Int? // minutes
  passingScore Int     @default(70) // percentage
  maxAttempts  Int     @default(3)
  isActive     Boolean @default(true)

  moduleId String
  module   CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  questions Question[]
  attempts  QuizAttempt[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  QuizAnswer QuizAnswer[]

  @@map("quizzes")
}

model Question {
  id            String       @id @default(cuid())
  question      String
  questionType  QuestionType @default(MULTIPLE_CHOICE)
  options       Json? // Array of options for multiple choice
  correctAnswer Json // Correct answer(s)
  explanation   String?
  points        Int          @default(1)
  sortOrder     Int

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  QuizAnswer QuizAnswer[]

  @@map("questions")
}

model QuizAttempt {
  id          String  @id @default(cuid())
  score       Float // percentage
  answers     Json // User's answers
  timeSpent   Int // minutes
  isCompleted Boolean @default(false)

  userId       String
  quizId       String
  enrollmentId String

  quiz       Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quiz_attempts")
}

model Project {
  id           String      @id @default(cuid())
  title        String
  description  String
  requirements String[]
  difficulty   CourseLevel @default(BEGINNER)
  points       Int         @default(100)
  dueDate      DateTime?
  isActive     Boolean     @default(true)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  resources   Resource[]
  submissions Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model Submission {
  id        String           @id @default(cuid())
  content   String? // Text submission
  fileUrl   String? // File submission URL
  githubUrl String? // GitHub repository URL
  liveUrl   String? // Live demo URL
  notes     String? // Additional notes
  status    SubmissionStatus @default(PENDING)
  score     Float? // 0-100
  feedback  String?
  gradedAt  DateTime?

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, projectId])
  @@map("submissions")
}

model QuizAnswer {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId         String
  quiz           Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionId     String
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedAnswer String
  isCorrect      Boolean
  aiExplanation  String?
  submittedAt    DateTime @default(now())

  @@map("quiz_answers")
}

model LearningPath {
  id          String              @id @default(cuid())
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  description String?
  milestones  ProgressMilestone[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@map("learning_paths")
}

model Skill {
  id                String             @id @default(cuid())
  name              String             @unique
  description       String?
  courseId          String
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userSkills        UserSkill[]
  aiRecommendations AIRecommendation[] @relation("SkillRecommendations") // Added opposite relation
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("skills")
}

model UserSkill {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillId    String
  skill      Skill          @relation(fields: [skillId], references: [id], onDelete: Cascade)
  level      EducationLevel @default(BEGINNER)
  acquiredAt DateTime       @default(now())

  @@map("user_skills")
}

model ProgressMilestone {
  id             String        @id @default(cuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPathId String?
  learningPath   LearningPath? @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  type           MilestoneType
  description    String
  achievedAt     DateTime      @default(now())

  @@map("progress_milestones")
}

model AIRecommendation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String?
  course      Course?  @relation("CourseRecommendations", fields: [courseId], references: [id], onDelete: Cascade)
  skillId     String?
  skill       Skill?   @relation("SkillRecommendations", fields: [skillId], references: [id], onDelete: Cascade)
  type        String
  description String
  createdAt   DateTime @default(now())

  @@map("ai_recommendations")
}

// ================================
// MENTORSHIP & SESSIONS
// ================================

model MentorshipSession {
  id          String        @id @default(cuid())
  title       String
  description String?
  duration    Int // minutes
  price       Float
  status      SessionStatus @default(SCHEDULED)
  meetingUrl  String?
  notes       String?
  feedback    String?
  rating      Int? // 1-5

  scheduledAt DateTime
  startedAt   DateTime?
  endedAt     DateTime?

  studentId String
  student   User   @relation("StudentSessions", fields: [studentId], references: [id], onDelete: Cascade)
  tutorId   String
  tutor     User   @relation("TutorSessions", fields: [tutorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mentorship_sessions")
}

// ================================
// LEGACY REGISTRATIONS
// ================================

model Registration {
  id         String   @id @default(cuid())
  firstname  String
  lastname   String
  email      String   @unique
  occupation String
  course     String
  type       String   @default("physical")
  phone      String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("registrations")
}

model ProgramRegistration {
  id          String   @id @default(cuid())
  fullName    String
  age         Int
  dateOfBirth DateTime
  phoneNumber String
  email       String   @unique
  goals       String?
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("program_registrations")
}

// ================================
// REVIEWS & RATINGS
// ================================

model Review {
  id       String  @id @default(cuid())
  rating   Int // 1-5
  comment  String?
  isPublic Boolean @default(true)

  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  tutorName    String
  reviewerName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("reviews")
}

// ================================
// COMMERCE & PAYMENTS
// ================================

model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(1)

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("cart_items")
}

model Transaction {
  id                String            @id @default(cuid())
  amount            Float
  currency          String            @default("NGN")
  status            TransactionStatus @default(PENDING)
  paymentMethod     String? // paystack, stripe, etc.
  paymentId         String? // External payment ID
  description       String?
  metadata          Json?
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId          String?
  course            Course?           @relation(fields: [courseId], references: [id])
  transactionId     String
  paymentDate       DateTime          @default(now())
  verifiedAt        DateTime          @updatedAt
  bankNameUsed      String?           @map("bank_name_used")
  accountNumberUsed String?           @map("account_number_used")
  recipientCodeUsed String?           @map("recipient_code_used")
  walletBalanceUsed Float?            @map("wallet_balance_used")
  isBankTransaction Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("transactions")
}

model PaymentMethod {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      PaymentType @default(BANK)
  details   Json
  isDefault Boolean     @default(false)
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([userId, type])
  @@map("payment_methods")
}

model Wishlist {
  id String @id @default(cuid())

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, courseId])
  @@map("wishlist")
}

// ================================
// COMMUNICATION & NOTIFICATIONS
// ================================

model Notification {
  id      String           @id @default(cuid())
  title   String
  message String
  type    NotificationType @default(INFO)
  isRead  Boolean          @default(false)
  data    Json? // Additional data

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Discussion {
  id       String  @id @default(cuid())
  title    String
  content  String
  isPinned Boolean @default(false)
  isLocked Boolean @default(false)

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  replies DiscussionReply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("discussions")
}

model DiscussionReply {
  id      String @id @default(cuid())
  content String

  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussionId String
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("discussion_replies")
}

// ================================
// RESOURCES & CONTENT
// ================================

model Resource {
  id          String        @id @default(cuid())
  title       String
  description String?
  url         String
  type        ResourceType  @default(LINK)
  fileSize    Int? // bytes
  mimeType    String?
  isPublic    Boolean       @default(false)
  moduleId    String?
  module      CourseModule? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessonId    String?
  lesson      Lesson?       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resources")
}

model Certificate {
  id             String    @id @default(cuid())
  certificateId  String    @unique // Public certificate ID
  title          String
  description    String?
  imageUrl       String?
  issuedAt       DateTime  @default(now())
  expiresAt      DateTime?
  isRevoked      Boolean   @default(false)
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studentName    String
  issuedDate     DateTime  @default(now())
  certificateUrl String    @default("")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("certificates")
}

// ================================
// ANALYTICS & REPORTING
// ================================

model UserAnalytics {
  id   String   @id @default(cuid())
  date DateTime @db.Date

  // Activity Metrics
  loginCount      Int @default(0)
  sessionDuration Int @default(0) // minutes
  coursesViewed   Int @default(0)
  lessonsWatched  Int @default(0)
  quizzesTaken    Int @default(0)

  // Engagement Metrics
  discussionPosts   Int @default(0)
  reviewsWritten    Int @default(0)
  projectsSubmitted Int @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
  @@map("user_analytics")
}

model CourseAnalytics {
  id   String   @id @default(cuid())
  date DateTime @db.Date

  // Enrollment Metrics
  newEnrollments Int @default(0)
  completions    Int @default(0)
  dropouts       Int @default(0)

  // Engagement Metrics
  totalWatchTime  Int   @default(0) // minutes
  averageProgress Float @default(0)
  quizAttempts    Int   @default(0)
  discussionPosts Int   @default(0)

  // Revenue Metrics
  revenue Float @default(0)
  refunds Float @default(0)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, date])
  @@map("course_analytics")
}

model Report {
  id          String       @id @default(cuid())
  type        ReportType
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  resolution  String?

  reporterId String
  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  // Polymorphic relations - only one should be set
  courseId     String?
  discussionId String?
  userId       String? // Reported user

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reports")
}

// ================================
// AUTHENTICATION (NextAuth)
// ================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Chat {
  id        String   @id @default(uuid())
  sessionId String
  session   Session  @relation("SessionChats", fields: [sessionId], references: [id], onDelete: Cascade)
  message   Json
  modelUsed String?
  timestamp DateTime @default(now())

  @@map("chats")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  chats Chat[] @relation("SessionChats")

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  email   String

  @@unique([id, token, email])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// ================================
// ENUMS
// ================================

enum UserRole {
  USER
  STUDENT
  TUTOR
  ADMIN
}

enum AdminLevel {
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum EducationLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SUSPENDED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  SUSPENDED
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
  PROJECT
  LIVE
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  CODE
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
  RETURNED
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentType {
  BANK
  WALLET
  PAYPAL
  STRIPE
  PAYSTACK
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ACHIEVEMENT
  REMINDER
}

enum ResourceType {
  PDF
  VIDEO
  AUDIO
  IMAGE
  LINK
  CODE
  DOCUMENT
}

enum ReportType {
  SPAM
  INAPPROPRIATE
  COPYRIGHT
  HARASSMENT
  OTHER
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
}

enum MilestoneType {
  LESSON_COMPLETED
  QUIZ_PASSED
  COURSE_COMPLETED
  SKILL_MASTERED
}

enum Language {
  EN
  ES
  FR
  DE
}
